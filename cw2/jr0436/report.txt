-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [60] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited 
by the assignment description of course).  Let us know what third-party 
source code or resources you used (if any) so it's clear what's your work 
and what isn't:

[...]

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious element (e.g., the functional correctness of a stage).
For example, other elements outside this list *often* warrant an increase
or decrease in marks; examples include hard to quantify features such as
the style or efficiency of a solution.

[?] Stage 1 : an attack based on error messages

              - Successfully reversed RSADP    primitive             ( 50%)
              - Successfully reversed EME-OAEP primitive             ( 50%)

                Attack result : [da39a3ee5e6b4b0d3255bfef95601890afd8070900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f525000000aaf9cef6013923382c5c661bc7ac038b6b26be1038ebc8e28776cbbeb85402650a8d2f46]

[?] Stage 2 : an attack based on execution time

              - Efficiency  of attack strategy                       ( 20%)
              - Robustness  of attack strategy                       ( 20%)
              - Correctness of attack strategy                       ( 60%)

                Attack result : [bd86f5acc9df0bef]

[?] Stage 3 : an attack based on an injected fault

              - Efficiency  of attack strategy                       ( 20%)
              - Robustness  of attack strategy                       ( 20%)
              - Correctness of attack strategy                       ( 60%)

                Attack result : []

[?] Stage 4 : an attack based on power consumption

              - Efficiency  of attack strategy                       ( 20%)
              - Robustness  of attack strategy                       ( 20%)
              - Correctness of attack strategy                       ( 60%)

                Attack result : [...]

[?] Stage 5 : analysis                                               (100%)

                                                                     ------
                                                                     (500%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

[I made Stage 2 robust by restarting with a higher sample count if the highest difference between bins was less than 2, and it keeps incrementing the key until it finds the key regardless of its size, so it would work with any sized key. I recognised that it could have been made more efficient if i always presume that the key will end in 1 as the secret key for RSA is going to be a prime number and will always be odd, however to make it really bulletproof i decided to keep in the check for it ending in 0 incase you decided to test it with a silly but valid d. ]

-------------------------------------------------------------------------------