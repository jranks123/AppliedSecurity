#include "modmul.h"
#include <gmp.h>


/*
Perform stage 1:

- read each 3-tuple of N, e and m from stdin,
- compute the RSA encryption c,
- then write the ciphertext c to stdout.
*/

void stage1(char* input, char* output) {
  // fill in this function with solution
	FILE *fp;
	int i = 0;
	int j = 0;
	char * line = NULL;
    size_t len = 0;
    ssize_t read;
	fp = (fopen(input, "r"));
	if (fp == NULL)
	{
		printf("enter a valid file\n");
	} 
	char N[30];
	char e[30];
	char m[30];
    while ((read = getline(&line, &len, fp)) != -1) {
    	if(j%3 == 0){
    		m[i] = line;
    		i++;
    	}
    	//printf("Line %d\n", i);
        j++;
    }
    printf("%s\n", m[0]);
}

/*
Perform stage 2:

- read each 9-tuple of N, d, p, q, d_p, d_q, i_p, i_q and c from stdin,
- compute the RSA decryption m,
- then write the plaintext m to stdout.
*/

void stage2() {

  // fill in this function with solution

}

/*
Perform stage 3:

- read each 5-tuple of p, q, g, h and m from stdin,
- compute the ElGamal encryption c = (c_1,c_2),
- then write the ciphertext c to stdout.
*/

void stage3() {

  // fill in this function with solution

}

/*
Perform stage 4:

- read each 5-tuple of p, q, g, x and c = (c_1,c_2) from stdin,
- compute the ElGamal decryption m,
- then write the plaintext m to stdout.
*/

void stage4() {

  // fill in this function with solution

}

/*
The main function acts as a driver for the assignment by simply invoking
the correct function for the requested stage.
*/

int main( int argc, char* argv[] ) {
  if     ( !strcmp( argv[ 1 ], "stage1" ) ) {
    stage1(argv[2], argv[3]);
  }
  else if( !strcmp( argv[ 1 ], "stage2" ) ) {
    stage2();
  }
  else if( !strcmp( argv[ 1 ], "stage3" ) ) {
    stage3();
  }
  else if( !strcmp( argv[ 1 ], "stage4" ) ) {
    stage4();
  }

  return 0;
}
