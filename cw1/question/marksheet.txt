-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [50] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited 
by the assignment description of course).  Let us know what third-party 
source code or resources you used (if any) so it's clear what's your work 
and what isn't:

[...]

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious element (e.g., the functional correctness of a stage).
For example, other elements outside this list *often* warrant an increase
or decrease in marks; examples include hard to quantify features such as
the style or efficiency of a solution.

[X] Stage 1 : implemented RSA     encryption                         ( 10%)

[X] Stage 2 : implemented RSA     decryption                         ( 10%)

[X] Stage 3 : implemented ElGamal encryption                         ( 10%)

[X] Stage 4 : implemented ElGamal decryption                         ( 10%)

    Extra   : implemented (and integrated) major optimisations
[X]           - Chinese Remainder Theorem (CRT)                      ( 10%)
[X]           - Non-binary (i.e., "windowed") exponentiation         ( 20%)
[X]           - Montgomery multiplication                            ( 30%)


                                                                     ------
                                                                     (100%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

[In addition to implementing Mongomery Exponentiation within the K-ary sliding
  window, I made a number of optimisations. Firstly I took all mpz_t initialisations
  out of the Mongomery Multiplication function as this was making it less efficient.
  Also, instead of using mpz_getlimbn to extract limbs from the mpz_t's, I accessed the 
  limbs directly using the ->_mp_d syntax. To generate randomness I read 8 bytes from 
  /dev/urandom and treats the bits as an integer which i use as my initial seed. I chose K to be 5 for my sliding window as
  this resulted in the best speed;

  I also implemented the Montgomery reduction algorithm (found in modmul.h). I know that i could
  have used it to slightly improve the efficiency of the CRT as i could have used it to avoid having to 
  use mpz_mod to mod x by p or q, but I decided not to because I didn't have the time and it wouldn't have
  made much of a difference in terms of efficiency because it would only have been called a few times anyway.

  My program works for 64 bit machines but could easily be changed to work for 32 bit machines by changing the variable w found
  in newPow and calculateOmega to 32. 

  ]

-------------------------------------------------------------------------------
